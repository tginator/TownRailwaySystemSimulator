CRITERIA 

a) No errors or warnings from the PMD.

------------------------------------------

b) Application is broken up into packages:
-assignment2
    - Factories 
    - Patterns
        - State
        - Observer
    - Towns

Within each contains interfaces and isolation of responsibilities.

------------------------------------------

c) Error handling for simulation classes to handle invalid input from TownsInput.java inside of Simulator.java
   Logging used for any invalid input, updates to towns/railways and day changes as well as message processing. 

------------------------------------------

d) In my design I created a factory for the Railway states. This factory (RailwayFactory) has the method
createRailway() in which the concrete factory classeses will use to generate the RailwayFactory
state.

 I used the class RailwayUpdater to inject specific RailwayFactory implemejntations at runtime. I decoupled the logic
of creating railway state objects from the RailwayUpdater and the Railway object. Updates occur when the specific state instance 
tells the RailwayUpdater to inject a new state into a Railway object. 

------------------------------------------

e) Railway and TownNetwork act as observables, they both implement the interface, Observable as they both will have to register and 
notify observers (being the towns). They notify registered observers (towns) about events such as construction updates
or population changes. Town objects implement the Observer interface to receive and respond to notifications from the railway or town
and thus update itself accordingly. 

------------------------------------------

f) In my code, I designed the Railway class as the context that holds a reference to the current state, which implements the RailwayState
interface. By delegating state-specific behavior to separate classes like ConstructingRailway, SingleRailway, ConstructingDual, 
and DualRailway, I encapsulated the behavior unique to each state. This approach allows the railway's behavior to change dynamically as its
internal state changes, without the need for complex conditional logic within the Railway class.

The RailwayUpdater class manages our state context, the Railway class. It contains methods like completeSingleTrackConstruction(), upgradeToDualTrack(),
and completeDualTrackConstruction(). These methods use factory classes to create new state instances and then update the state of the Railway object by
calling its updateState() method. This design allows the Railway class to remain clean and focused on its role as the context, while the RailwayUpdater handles 
the specifics of transitioning between states. By separating the state transition logic into RailwayUpdater, I ensure that state changes are 
managed in a centralized and organized manner, enhancing the maintainability and scalability of the system.

------------------------------------------

g) By implementing the Build<T> class as a generic collection manager, I can handle different types of objects such as Town, Railway, and Observer using the same 
class structure. This allows me to add, retrieve, and manage collections of various types in a type-safe manner without duplicating code for each specific class.
